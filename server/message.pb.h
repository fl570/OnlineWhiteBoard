// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Operation;
class Operation_OperationData;
class Operation_OperationData_Point;
class Operations;
class Document;
class DocumentList;
class MeetingServerInfo;
class JoinMeetingReturn;
class User;
class HeartBeatSendPackage;
class HeartReturnPackage;
class UserList;

enum Operation_OperationData_OperationDataType {
  Operation_OperationData_OperationDataType_LINE = 0,
  Operation_OperationData_OperationDataType_ELLIPSE = 1,
  Operation_OperationData_OperationDataType_RECTANGE = 2,
  Operation_OperationData_OperationDataType_POINT = 3,
  Operation_OperationData_OperationDataType_ERASER = 4
};
bool Operation_OperationData_OperationDataType_IsValid(int value);
const Operation_OperationData_OperationDataType Operation_OperationData_OperationDataType_OperationDataType_MIN = Operation_OperationData_OperationDataType_LINE;
const Operation_OperationData_OperationDataType Operation_OperationData_OperationDataType_OperationDataType_MAX = Operation_OperationData_OperationDataType_ERASER;
const int Operation_OperationData_OperationDataType_OperationDataType_ARRAYSIZE = Operation_OperationData_OperationDataType_OperationDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_OperationData_OperationDataType_descriptor();
inline const ::std::string& Operation_OperationData_OperationDataType_Name(Operation_OperationData_OperationDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_OperationData_OperationDataType_descriptor(), value);
}
inline bool Operation_OperationData_OperationDataType_Parse(
    const ::std::string& name, Operation_OperationData_OperationDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_OperationData_OperationDataType>(
    Operation_OperationData_OperationDataType_descriptor(), name, value);
}
enum Operations_OperationAvaliable {
  Operations_OperationAvaliable_NOT_AVALIABLE = 1,
  Operations_OperationAvaliable_LOAD_DOCUMENT = 2,
  Operations_OperationAvaliable_AVALIBLE = 3
};
bool Operations_OperationAvaliable_IsValid(int value);
const Operations_OperationAvaliable Operations_OperationAvaliable_OperationAvaliable_MIN = Operations_OperationAvaliable_NOT_AVALIABLE;
const Operations_OperationAvaliable Operations_OperationAvaliable_OperationAvaliable_MAX = Operations_OperationAvaliable_AVALIBLE;
const int Operations_OperationAvaliable_OperationAvaliable_ARRAYSIZE = Operations_OperationAvaliable_OperationAvaliable_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operations_OperationAvaliable_descriptor();
inline const ::std::string& Operations_OperationAvaliable_Name(Operations_OperationAvaliable value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operations_OperationAvaliable_descriptor(), value);
}
inline bool Operations_OperationAvaliable_Parse(
    const ::std::string& name, Operations_OperationAvaliable* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operations_OperationAvaliable>(
    Operations_OperationAvaliable_descriptor(), name, value);
}
enum Identity {
  HOST = 1,
  CANDIDATE = 2,
  PARTICIPANTS = 3
};
bool Identity_IsValid(int value);
const Identity Identity_MIN = HOST;
const Identity Identity_MAX = PARTICIPANTS;
const int Identity_ARRAYSIZE = Identity_MAX + 1;

const ::google::protobuf::EnumDescriptor* Identity_descriptor();
inline const ::std::string& Identity_Name(Identity value) {
  return ::google::protobuf::internal::NameOfEnum(
    Identity_descriptor(), value);
}
inline bool Identity_Parse(
    const ::std::string& name, Identity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Identity>(
    Identity_descriptor(), name, value);
}
enum JoinState {
  SUCCESS = 1,
  FAIL = 2,
  NOTAVAILABLE = 3,
  DEAD = 4
};
bool JoinState_IsValid(int value);
const JoinState JoinState_MIN = SUCCESS;
const JoinState JoinState_MAX = DEAD;
const int JoinState_ARRAYSIZE = JoinState_MAX + 1;

const ::google::protobuf::EnumDescriptor* JoinState_descriptor();
inline const ::std::string& JoinState_Name(JoinState value) {
  return ::google::protobuf::internal::NameOfEnum(
    JoinState_descriptor(), value);
}
inline bool JoinState_Parse(
    const ::std::string& name, JoinState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JoinState>(
    JoinState_descriptor(), name, value);
}
// ===================================================================

class Operation_OperationData_Point : public ::google::protobuf::Message {
 public:
  Operation_OperationData_Point();
  virtual ~Operation_OperationData_Point();
  
  Operation_OperationData_Point(const Operation_OperationData_Point& from);
  
  inline Operation_OperationData_Point& operator=(const Operation_OperationData_Point& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation_OperationData_Point& default_instance();
  
  void Swap(Operation_OperationData_Point* other);
  
  // implements Message ----------------------------------------------
  
  Operation_OperationData_Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation_OperationData_Point& from);
  void MergeFrom(const Operation_OperationData_Point& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Operation.OperationData.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static Operation_OperationData_Point* default_instance_;
};
// -------------------------------------------------------------------

class Operation_OperationData : public ::google::protobuf::Message {
 public:
  Operation_OperationData();
  virtual ~Operation_OperationData();
  
  Operation_OperationData(const Operation_OperationData& from);
  
  inline Operation_OperationData& operator=(const Operation_OperationData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation_OperationData& default_instance();
  
  void Swap(Operation_OperationData* other);
  
  // implements Message ----------------------------------------------
  
  Operation_OperationData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation_OperationData& from);
  void MergeFrom(const Operation_OperationData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Operation_OperationData_Point Point;
  
  typedef Operation_OperationData_OperationDataType OperationDataType;
  static const OperationDataType LINE = Operation_OperationData_OperationDataType_LINE;
  static const OperationDataType ELLIPSE = Operation_OperationData_OperationDataType_ELLIPSE;
  static const OperationDataType RECTANGE = Operation_OperationData_OperationDataType_RECTANGE;
  static const OperationDataType POINT = Operation_OperationData_OperationDataType_POINT;
  static const OperationDataType ERASER = Operation_OperationData_OperationDataType_ERASER;
  static inline bool OperationDataType_IsValid(int value) {
    return Operation_OperationData_OperationDataType_IsValid(value);
  }
  static const OperationDataType OperationDataType_MIN =
    Operation_OperationData_OperationDataType_OperationDataType_MIN;
  static const OperationDataType OperationDataType_MAX =
    Operation_OperationData_OperationDataType_OperationDataType_MAX;
  static const int OperationDataType_ARRAYSIZE =
    Operation_OperationData_OperationDataType_OperationDataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationDataType_descriptor() {
    return Operation_OperationData_OperationDataType_descriptor();
  }
  static inline const ::std::string& OperationDataType_Name(OperationDataType value) {
    return Operation_OperationData_OperationDataType_Name(value);
  }
  static inline bool OperationDataType_Parse(const ::std::string& name,
      OperationDataType* value) {
    return Operation_OperationData_OperationDataType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Operation.OperationData.OperationDataType data_type = 1;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  inline ::Operation_OperationData_OperationDataType data_type() const;
  inline void set_data_type(::Operation_OperationData_OperationDataType value);
  
  // required int32 thinkness = 2;
  inline bool has_thinkness() const;
  inline void clear_thinkness();
  static const int kThinknessFieldNumber = 2;
  inline ::google::protobuf::int32 thinkness() const;
  inline void set_thinkness(::google::protobuf::int32 value);
  
  // optional int32 color = 3;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 3;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);
  
  // optional .Operation.OperationData.Point start_point = 4;
  inline bool has_start_point() const;
  inline void clear_start_point();
  static const int kStartPointFieldNumber = 4;
  inline const ::Operation_OperationData_Point& start_point() const;
  inline ::Operation_OperationData_Point* mutable_start_point();
  inline ::Operation_OperationData_Point* release_start_point();
  
  // optional .Operation.OperationData.Point end_point = 5;
  inline bool has_end_point() const;
  inline void clear_end_point();
  static const int kEndPointFieldNumber = 5;
  inline const ::Operation_OperationData_Point& end_point() const;
  inline ::Operation_OperationData_Point* mutable_end_point();
  inline ::Operation_OperationData_Point* release_end_point();
  
  // optional .Operation.OperationData.Point center = 6;
  inline bool has_center() const;
  inline void clear_center();
  static const int kCenterFieldNumber = 6;
  inline const ::Operation_OperationData_Point& center() const;
  inline ::Operation_OperationData_Point* mutable_center();
  inline ::Operation_OperationData_Point* release_center();
  
  // optional float angle = 7;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 7;
  inline float angle() const;
  inline void set_angle(float value);
  
  // optional float a = 8;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 8;
  inline float a() const;
  inline void set_a(float value);
  
  // optional float b = 9;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 9;
  inline float b() const;
  inline void set_b(float value);
  
  // optional .Operation.OperationData.Point top_left_corner = 10;
  inline bool has_top_left_corner() const;
  inline void clear_top_left_corner();
  static const int kTopLeftCornerFieldNumber = 10;
  inline const ::Operation_OperationData_Point& top_left_corner() const;
  inline ::Operation_OperationData_Point* mutable_top_left_corner();
  inline ::Operation_OperationData_Point* release_top_left_corner();
  
  // optional .Operation.OperationData.Point bottom_right_corner = 11;
  inline bool has_bottom_right_corner() const;
  inline void clear_bottom_right_corner();
  static const int kBottomRightCornerFieldNumber = 11;
  inline const ::Operation_OperationData_Point& bottom_right_corner() const;
  inline ::Operation_OperationData_Point* mutable_bottom_right_corner();
  inline ::Operation_OperationData_Point* release_bottom_right_corner();
  
  // optional .Operation.OperationData.Point position = 12;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 12;
  inline const ::Operation_OperationData_Point& position() const;
  inline ::Operation_OperationData_Point* mutable_position();
  inline ::Operation_OperationData_Point* release_position();
  
  // optional bool is_start = 15;
  inline bool has_is_start() const;
  inline void clear_is_start();
  static const int kIsStartFieldNumber = 15;
  inline bool is_start() const;
  inline void set_is_start(bool value);
  
  // optional bool fill = 13;
  inline bool has_fill() const;
  inline void clear_fill();
  static const int kFillFieldNumber = 13;
  inline bool fill() const;
  inline void set_fill(bool value);
  
  // optional float alpha = 14;
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 14;
  inline float alpha() const;
  inline void set_alpha(float value);
  
  // @@protoc_insertion_point(class_scope:Operation.OperationData)
 private:
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_thinkness();
  inline void clear_has_thinkness();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_start_point();
  inline void clear_has_start_point();
  inline void set_has_end_point();
  inline void clear_has_end_point();
  inline void set_has_center();
  inline void clear_has_center();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_top_left_corner();
  inline void clear_has_top_left_corner();
  inline void set_has_bottom_right_corner();
  inline void clear_has_bottom_right_corner();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_is_start();
  inline void clear_has_is_start();
  inline void set_has_fill();
  inline void clear_has_fill();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int data_type_;
  ::google::protobuf::int32 thinkness_;
  ::Operation_OperationData_Point* start_point_;
  ::Operation_OperationData_Point* end_point_;
  ::google::protobuf::int32 color_;
  float angle_;
  ::Operation_OperationData_Point* center_;
  float a_;
  float b_;
  ::Operation_OperationData_Point* top_left_corner_;
  ::Operation_OperationData_Point* bottom_right_corner_;
  ::Operation_OperationData_Point* position_;
  bool is_start_;
  bool fill_;
  float alpha_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static Operation_OperationData* default_instance_;
};
// -------------------------------------------------------------------

class Operation : public ::google::protobuf::Message {
 public:
  Operation();
  virtual ~Operation();
  
  Operation(const Operation& from);
  
  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation& default_instance();
  
  void Swap(Operation* other);
  
  // implements Message ----------------------------------------------
  
  Operation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Operation_OperationData OperationData;
  
  // accessors -------------------------------------------------------
  
  // required uint32 serial_number = 1;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);
  
  // required .Operation.OperationData data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::Operation_OperationData& data() const;
  inline ::Operation_OperationData* mutable_data();
  inline ::Operation_OperationData* release_data();
  
  // @@protoc_insertion_point(class_scope:Operation)
 private:
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Operation_OperationData* data_;
  ::google::protobuf::uint32 serial_number_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static Operation* default_instance_;
};
// -------------------------------------------------------------------

class Operations : public ::google::protobuf::Message {
 public:
  Operations();
  virtual ~Operations();
  
  Operations(const Operations& from);
  
  inline Operations& operator=(const Operations& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Operations& default_instance();
  
  void Swap(Operations* other);
  
  // implements Message ----------------------------------------------
  
  Operations* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operations& from);
  void MergeFrom(const Operations& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Operations_OperationAvaliable OperationAvaliable;
  static const OperationAvaliable NOT_AVALIABLE = Operations_OperationAvaliable_NOT_AVALIABLE;
  static const OperationAvaliable LOAD_DOCUMENT = Operations_OperationAvaliable_LOAD_DOCUMENT;
  static const OperationAvaliable AVALIBLE = Operations_OperationAvaliable_AVALIBLE;
  static inline bool OperationAvaliable_IsValid(int value) {
    return Operations_OperationAvaliable_IsValid(value);
  }
  static const OperationAvaliable OperationAvaliable_MIN =
    Operations_OperationAvaliable_OperationAvaliable_MIN;
  static const OperationAvaliable OperationAvaliable_MAX =
    Operations_OperationAvaliable_OperationAvaliable_MAX;
  static const int OperationAvaliable_ARRAYSIZE =
    Operations_OperationAvaliable_OperationAvaliable_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationAvaliable_descriptor() {
    return Operations_OperationAvaliable_descriptor();
  }
  static inline const ::std::string& OperationAvaliable_Name(OperationAvaliable value) {
    return Operations_OperationAvaliable_Name(value);
  }
  static inline bool OperationAvaliable_Parse(const ::std::string& name,
      OperationAvaliable* value) {
    return Operations_OperationAvaliable_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Operations.OperationAvaliable operation_avaliable = 1;
  inline bool has_operation_avaliable() const;
  inline void clear_operation_avaliable();
  static const int kOperationAvaliableFieldNumber = 1;
  inline ::Operations_OperationAvaliable operation_avaliable() const;
  inline void set_operation_avaliable(::Operations_OperationAvaliable value);
  
  // repeated .Operation operations = 2;
  inline int operations_size() const;
  inline void clear_operations();
  static const int kOperationsFieldNumber = 2;
  inline const ::Operation& operations(int index) const;
  inline ::Operation* mutable_operations(int index);
  inline ::Operation* add_operations();
  inline const ::google::protobuf::RepeatedPtrField< ::Operation >&
      operations() const;
  inline ::google::protobuf::RepeatedPtrField< ::Operation >*
      mutable_operations();
  
  // @@protoc_insertion_point(class_scope:Operations)
 private:
  inline void set_has_operation_avaliable();
  inline void clear_has_operation_avaliable();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Operation > operations_;
  int operation_avaliable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static Operations* default_instance_;
};
// -------------------------------------------------------------------

class Document : public ::google::protobuf::Message {
 public:
  Document();
  virtual ~Document();
  
  Document(const Document& from);
  
  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();
  
  void Swap(Document* other);
  
  // implements Message ----------------------------------------------
  
  Document* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 serial_number = 1;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);
  
  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  
  // @@protoc_insertion_point(class_scope:Document)
 private:
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  ::std::string* user_name_;
  ::google::protobuf::uint32 serial_number_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static Document* default_instance_;
};
// -------------------------------------------------------------------

class DocumentList : public ::google::protobuf::Message {
 public:
  DocumentList();
  virtual ~DocumentList();
  
  DocumentList(const DocumentList& from);
  
  inline DocumentList& operator=(const DocumentList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentList& default_instance();
  
  void Swap(DocumentList* other);
  
  // implements Message ----------------------------------------------
  
  DocumentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentList& from);
  void MergeFrom(const DocumentList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Document history_document = 1;
  inline int history_document_size() const;
  inline void clear_history_document();
  static const int kHistoryDocumentFieldNumber = 1;
  inline const ::Document& history_document(int index) const;
  inline ::Document* mutable_history_document(int index);
  inline ::Document* add_history_document();
  inline const ::google::protobuf::RepeatedPtrField< ::Document >&
      history_document() const;
  inline ::google::protobuf::RepeatedPtrField< ::Document >*
      mutable_history_document();
  
  // @@protoc_insertion_point(class_scope:DocumentList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Document > history_document_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static DocumentList* default_instance_;
};
// -------------------------------------------------------------------

class MeetingServerInfo : public ::google::protobuf::Message {
 public:
  MeetingServerInfo();
  virtual ~MeetingServerInfo();
  
  MeetingServerInfo(const MeetingServerInfo& from);
  
  inline MeetingServerInfo& operator=(const MeetingServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MeetingServerInfo& default_instance();
  
  void Swap(MeetingServerInfo* other);
  
  // implements Message ----------------------------------------------
  
  MeetingServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeetingServerInfo& from);
  void MergeFrom(const MeetingServerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 port = 1;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // required string server_ip = 2;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 2;
  inline const ::std::string& server_ip() const;
  inline void set_server_ip(const ::std::string& value);
  inline void set_server_ip(const char* value);
  inline void set_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_server_ip();
  inline ::std::string* release_server_ip();
  
  // @@protoc_insertion_point(class_scope:MeetingServerInfo)
 private:
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* server_ip_;
  ::google::protobuf::int32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static MeetingServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class JoinMeetingReturn : public ::google::protobuf::Message {
 public:
  JoinMeetingReturn();
  virtual ~JoinMeetingReturn();
  
  JoinMeetingReturn(const JoinMeetingReturn& from);
  
  inline JoinMeetingReturn& operator=(const JoinMeetingReturn& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinMeetingReturn& default_instance();
  
  void Swap(JoinMeetingReturn* other);
  
  // implements Message ----------------------------------------------
  
  JoinMeetingReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinMeetingReturn& from);
  void MergeFrom(const JoinMeetingReturn& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .JoinState join_state = 1;
  inline bool has_join_state() const;
  inline void clear_join_state();
  static const int kJoinStateFieldNumber = 1;
  inline JoinState join_state() const;
  inline void set_join_state(JoinState value);
  
  // optional .MeetingServerInfo server_info = 2;
  inline bool has_server_info() const;
  inline void clear_server_info();
  static const int kServerInfoFieldNumber = 2;
  inline const ::MeetingServerInfo& server_info() const;
  inline ::MeetingServerInfo* mutable_server_info();
  inline ::MeetingServerInfo* release_server_info();
  
  // @@protoc_insertion_point(class_scope:JoinMeetingReturn)
 private:
  inline void set_has_join_state();
  inline void clear_has_join_state();
  inline void set_has_server_info();
  inline void clear_has_server_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::MeetingServerInfo* server_info_;
  int join_state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static JoinMeetingReturn* default_instance_;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();
  
  User(const User& from);
  
  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();
  
  void Swap(User* other);
  
  // implements Message ----------------------------------------------
  
  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  
  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional .Identity identity = 3;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 3;
  inline Identity identity() const;
  inline void set_identity(Identity value);
  
  // @@protoc_insertion_point(class_scope:User)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_identity();
  inline void clear_has_identity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* user_name_;
  ::std::string* password_;
  int identity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeatSendPackage : public ::google::protobuf::Message {
 public:
  HeartBeatSendPackage();
  virtual ~HeartBeatSendPackage();
  
  HeartBeatSendPackage(const HeartBeatSendPackage& from);
  
  inline HeartBeatSendPackage& operator=(const HeartBeatSendPackage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatSendPackage& default_instance();
  
  void Swap(HeartBeatSendPackage* other);
  
  // implements Message ----------------------------------------------
  
  HeartBeatSendPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeatSendPackage& from);
  void MergeFrom(const HeartBeatSendPackage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  
  // required string meeting_id = 2;
  inline bool has_meeting_id() const;
  inline void clear_meeting_id();
  static const int kMeetingIdFieldNumber = 2;
  inline const ::std::string& meeting_id() const;
  inline void set_meeting_id(const ::std::string& value);
  inline void set_meeting_id(const char* value);
  inline void set_meeting_id(const char* value, size_t size);
  inline ::std::string* mutable_meeting_id();
  inline ::std::string* release_meeting_id();
  
  // @@protoc_insertion_point(class_scope:HeartBeatSendPackage)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_meeting_id();
  inline void clear_has_meeting_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* user_name_;
  ::std::string* meeting_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static HeartBeatSendPackage* default_instance_;
};
// -------------------------------------------------------------------

class HeartReturnPackage : public ::google::protobuf::Message {
 public:
  HeartReturnPackage();
  virtual ~HeartReturnPackage();
  
  HeartReturnPackage(const HeartReturnPackage& from);
  
  inline HeartReturnPackage& operator=(const HeartReturnPackage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartReturnPackage& default_instance();
  
  void Swap(HeartReturnPackage* other);
  
  // implements Message ----------------------------------------------
  
  HeartReturnPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartReturnPackage& from);
  void MergeFrom(const HeartReturnPackage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Identity identity = 1;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 1;
  inline Identity identity() const;
  inline void set_identity(Identity value);
  
  // @@protoc_insertion_point(class_scope:HeartReturnPackage)
 private:
  inline void set_has_identity();
  inline void clear_has_identity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int identity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static HeartReturnPackage* default_instance_;
};
// -------------------------------------------------------------------

class UserList : public ::google::protobuf::Message {
 public:
  UserList();
  virtual ~UserList();
  
  UserList(const UserList& from);
  
  inline UserList& operator=(const UserList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserList& default_instance();
  
  void Swap(UserList* other);
  
  // implements Message ----------------------------------------------
  
  UserList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserList& from);
  void MergeFrom(const UserList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .User users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::User& users(int index) const;
  inline ::User* mutable_users(int index);
  inline ::User* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::User >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::User >*
      mutable_users();
  
  // @@protoc_insertion_point(class_scope:UserList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::User > users_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static UserList* default_instance_;
};
// ===================================================================


// ===================================================================

// Operation_OperationData_Point

// required int32 x = 1;
inline bool Operation_OperationData_Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operation_OperationData_Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Operation_OperationData_Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Operation_OperationData_Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Operation_OperationData_Point::x() const {
  return x_;
}
inline void Operation_OperationData_Point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool Operation_OperationData_Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Operation_OperationData_Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Operation_OperationData_Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Operation_OperationData_Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Operation_OperationData_Point::y() const {
  return y_;
}
inline void Operation_OperationData_Point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Operation_OperationData

// required .Operation.OperationData.OperationDataType data_type = 1;
inline bool Operation_OperationData::has_data_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operation_OperationData::set_has_data_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Operation_OperationData::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Operation_OperationData::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::Operation_OperationData_OperationDataType Operation_OperationData::data_type() const {
  return static_cast< ::Operation_OperationData_OperationDataType >(data_type_);
}
inline void Operation_OperationData::set_data_type(::Operation_OperationData_OperationDataType value) {
  GOOGLE_DCHECK(::Operation_OperationData_OperationDataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
}

// required int32 thinkness = 2;
inline bool Operation_OperationData::has_thinkness() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Operation_OperationData::set_has_thinkness() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Operation_OperationData::clear_has_thinkness() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Operation_OperationData::clear_thinkness() {
  thinkness_ = 0;
  clear_has_thinkness();
}
inline ::google::protobuf::int32 Operation_OperationData::thinkness() const {
  return thinkness_;
}
inline void Operation_OperationData::set_thinkness(::google::protobuf::int32 value) {
  set_has_thinkness();
  thinkness_ = value;
}

// optional int32 color = 3;
inline bool Operation_OperationData::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Operation_OperationData::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Operation_OperationData::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Operation_OperationData::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 Operation_OperationData::color() const {
  return color_;
}
inline void Operation_OperationData::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional .Operation.OperationData.Point start_point = 4;
inline bool Operation_OperationData::has_start_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Operation_OperationData::set_has_start_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Operation_OperationData::clear_has_start_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Operation_OperationData::clear_start_point() {
  if (start_point_ != NULL) start_point_->::Operation_OperationData_Point::Clear();
  clear_has_start_point();
}
inline const ::Operation_OperationData_Point& Operation_OperationData::start_point() const {
  return start_point_ != NULL ? *start_point_ : *default_instance_->start_point_;
}
inline ::Operation_OperationData_Point* Operation_OperationData::mutable_start_point() {
  set_has_start_point();
  if (start_point_ == NULL) start_point_ = new ::Operation_OperationData_Point;
  return start_point_;
}
inline ::Operation_OperationData_Point* Operation_OperationData::release_start_point() {
  clear_has_start_point();
  ::Operation_OperationData_Point* temp = start_point_;
  start_point_ = NULL;
  return temp;
}

// optional .Operation.OperationData.Point end_point = 5;
inline bool Operation_OperationData::has_end_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Operation_OperationData::set_has_end_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Operation_OperationData::clear_has_end_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Operation_OperationData::clear_end_point() {
  if (end_point_ != NULL) end_point_->::Operation_OperationData_Point::Clear();
  clear_has_end_point();
}
inline const ::Operation_OperationData_Point& Operation_OperationData::end_point() const {
  return end_point_ != NULL ? *end_point_ : *default_instance_->end_point_;
}
inline ::Operation_OperationData_Point* Operation_OperationData::mutable_end_point() {
  set_has_end_point();
  if (end_point_ == NULL) end_point_ = new ::Operation_OperationData_Point;
  return end_point_;
}
inline ::Operation_OperationData_Point* Operation_OperationData::release_end_point() {
  clear_has_end_point();
  ::Operation_OperationData_Point* temp = end_point_;
  end_point_ = NULL;
  return temp;
}

// optional .Operation.OperationData.Point center = 6;
inline bool Operation_OperationData::has_center() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Operation_OperationData::set_has_center() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Operation_OperationData::clear_has_center() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Operation_OperationData::clear_center() {
  if (center_ != NULL) center_->::Operation_OperationData_Point::Clear();
  clear_has_center();
}
inline const ::Operation_OperationData_Point& Operation_OperationData::center() const {
  return center_ != NULL ? *center_ : *default_instance_->center_;
}
inline ::Operation_OperationData_Point* Operation_OperationData::mutable_center() {
  set_has_center();
  if (center_ == NULL) center_ = new ::Operation_OperationData_Point;
  return center_;
}
inline ::Operation_OperationData_Point* Operation_OperationData::release_center() {
  clear_has_center();
  ::Operation_OperationData_Point* temp = center_;
  center_ = NULL;
  return temp;
}

// optional float angle = 7;
inline bool Operation_OperationData::has_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Operation_OperationData::set_has_angle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Operation_OperationData::clear_has_angle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Operation_OperationData::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float Operation_OperationData::angle() const {
  return angle_;
}
inline void Operation_OperationData::set_angle(float value) {
  set_has_angle();
  angle_ = value;
}

// optional float a = 8;
inline bool Operation_OperationData::has_a() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Operation_OperationData::set_has_a() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Operation_OperationData::clear_has_a() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Operation_OperationData::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline float Operation_OperationData::a() const {
  return a_;
}
inline void Operation_OperationData::set_a(float value) {
  set_has_a();
  a_ = value;
}

// optional float b = 9;
inline bool Operation_OperationData::has_b() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Operation_OperationData::set_has_b() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Operation_OperationData::clear_has_b() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Operation_OperationData::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float Operation_OperationData::b() const {
  return b_;
}
inline void Operation_OperationData::set_b(float value) {
  set_has_b();
  b_ = value;
}

// optional .Operation.OperationData.Point top_left_corner = 10;
inline bool Operation_OperationData::has_top_left_corner() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Operation_OperationData::set_has_top_left_corner() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Operation_OperationData::clear_has_top_left_corner() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Operation_OperationData::clear_top_left_corner() {
  if (top_left_corner_ != NULL) top_left_corner_->::Operation_OperationData_Point::Clear();
  clear_has_top_left_corner();
}
inline const ::Operation_OperationData_Point& Operation_OperationData::top_left_corner() const {
  return top_left_corner_ != NULL ? *top_left_corner_ : *default_instance_->top_left_corner_;
}
inline ::Operation_OperationData_Point* Operation_OperationData::mutable_top_left_corner() {
  set_has_top_left_corner();
  if (top_left_corner_ == NULL) top_left_corner_ = new ::Operation_OperationData_Point;
  return top_left_corner_;
}
inline ::Operation_OperationData_Point* Operation_OperationData::release_top_left_corner() {
  clear_has_top_left_corner();
  ::Operation_OperationData_Point* temp = top_left_corner_;
  top_left_corner_ = NULL;
  return temp;
}

// optional .Operation.OperationData.Point bottom_right_corner = 11;
inline bool Operation_OperationData::has_bottom_right_corner() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Operation_OperationData::set_has_bottom_right_corner() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Operation_OperationData::clear_has_bottom_right_corner() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Operation_OperationData::clear_bottom_right_corner() {
  if (bottom_right_corner_ != NULL) bottom_right_corner_->::Operation_OperationData_Point::Clear();
  clear_has_bottom_right_corner();
}
inline const ::Operation_OperationData_Point& Operation_OperationData::bottom_right_corner() const {
  return bottom_right_corner_ != NULL ? *bottom_right_corner_ : *default_instance_->bottom_right_corner_;
}
inline ::Operation_OperationData_Point* Operation_OperationData::mutable_bottom_right_corner() {
  set_has_bottom_right_corner();
  if (bottom_right_corner_ == NULL) bottom_right_corner_ = new ::Operation_OperationData_Point;
  return bottom_right_corner_;
}
inline ::Operation_OperationData_Point* Operation_OperationData::release_bottom_right_corner() {
  clear_has_bottom_right_corner();
  ::Operation_OperationData_Point* temp = bottom_right_corner_;
  bottom_right_corner_ = NULL;
  return temp;
}

// optional .Operation.OperationData.Point position = 12;
inline bool Operation_OperationData::has_position() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Operation_OperationData::set_has_position() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Operation_OperationData::clear_has_position() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Operation_OperationData::clear_position() {
  if (position_ != NULL) position_->::Operation_OperationData_Point::Clear();
  clear_has_position();
}
inline const ::Operation_OperationData_Point& Operation_OperationData::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::Operation_OperationData_Point* Operation_OperationData::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::Operation_OperationData_Point;
  return position_;
}
inline ::Operation_OperationData_Point* Operation_OperationData::release_position() {
  clear_has_position();
  ::Operation_OperationData_Point* temp = position_;
  position_ = NULL;
  return temp;
}

// optional bool is_start = 15;
inline bool Operation_OperationData::has_is_start() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Operation_OperationData::set_has_is_start() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Operation_OperationData::clear_has_is_start() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Operation_OperationData::clear_is_start() {
  is_start_ = false;
  clear_has_is_start();
}
inline bool Operation_OperationData::is_start() const {
  return is_start_;
}
inline void Operation_OperationData::set_is_start(bool value) {
  set_has_is_start();
  is_start_ = value;
}

// optional bool fill = 13;
inline bool Operation_OperationData::has_fill() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Operation_OperationData::set_has_fill() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Operation_OperationData::clear_has_fill() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Operation_OperationData::clear_fill() {
  fill_ = false;
  clear_has_fill();
}
inline bool Operation_OperationData::fill() const {
  return fill_;
}
inline void Operation_OperationData::set_fill(bool value) {
  set_has_fill();
  fill_ = value;
}

// optional float alpha = 14;
inline bool Operation_OperationData::has_alpha() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Operation_OperationData::set_has_alpha() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Operation_OperationData::clear_has_alpha() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Operation_OperationData::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline float Operation_OperationData::alpha() const {
  return alpha_;
}
inline void Operation_OperationData::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
}

// -------------------------------------------------------------------

// Operation

// required uint32 serial_number = 1;
inline bool Operation::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operation::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Operation::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Operation::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 Operation::serial_number() const {
  return serial_number_;
}
inline void Operation::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
}

// required .Operation.OperationData data = 2;
inline bool Operation::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Operation::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Operation::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Operation::clear_data() {
  if (data_ != NULL) data_->::Operation_OperationData::Clear();
  clear_has_data();
}
inline const ::Operation_OperationData& Operation::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Operation_OperationData* Operation::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Operation_OperationData;
  return data_;
}
inline ::Operation_OperationData* Operation::release_data() {
  clear_has_data();
  ::Operation_OperationData* temp = data_;
  data_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Operations

// required .Operations.OperationAvaliable operation_avaliable = 1;
inline bool Operations::has_operation_avaliable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operations::set_has_operation_avaliable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Operations::clear_has_operation_avaliable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Operations::clear_operation_avaliable() {
  operation_avaliable_ = 1;
  clear_has_operation_avaliable();
}
inline ::Operations_OperationAvaliable Operations::operation_avaliable() const {
  return static_cast< ::Operations_OperationAvaliable >(operation_avaliable_);
}
inline void Operations::set_operation_avaliable(::Operations_OperationAvaliable value) {
  GOOGLE_DCHECK(::Operations_OperationAvaliable_IsValid(value));
  set_has_operation_avaliable();
  operation_avaliable_ = value;
}

// repeated .Operation operations = 2;
inline int Operations::operations_size() const {
  return operations_.size();
}
inline void Operations::clear_operations() {
  operations_.Clear();
}
inline const ::Operation& Operations::operations(int index) const {
  return operations_.Get(index);
}
inline ::Operation* Operations::mutable_operations(int index) {
  return operations_.Mutable(index);
}
inline ::Operation* Operations::add_operations() {
  return operations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Operation >&
Operations::operations() const {
  return operations_;
}
inline ::google::protobuf::RepeatedPtrField< ::Operation >*
Operations::mutable_operations() {
  return &operations_;
}

// -------------------------------------------------------------------

// Document

// required uint32 serial_number = 1;
inline bool Document::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 Document::serial_number() const {
  return serial_number_;
}
inline void Document::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
}

// required bytes data = 2;
inline bool Document::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Document::data() const {
  return *data_;
}
inline void Document::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Document::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Document::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Document::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user_name = 3;
inline bool Document::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Document::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Document::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Document::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& Document::user_name() const {
  return *user_name_;
}
inline void Document::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void Document::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void Document::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* Document::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DocumentList

// repeated .Document history_document = 1;
inline int DocumentList::history_document_size() const {
  return history_document_.size();
}
inline void DocumentList::clear_history_document() {
  history_document_.Clear();
}
inline const ::Document& DocumentList::history_document(int index) const {
  return history_document_.Get(index);
}
inline ::Document* DocumentList::mutable_history_document(int index) {
  return history_document_.Mutable(index);
}
inline ::Document* DocumentList::add_history_document() {
  return history_document_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Document >&
DocumentList::history_document() const {
  return history_document_;
}
inline ::google::protobuf::RepeatedPtrField< ::Document >*
DocumentList::mutable_history_document() {
  return &history_document_;
}

// -------------------------------------------------------------------

// MeetingServerInfo

// required int32 port = 1;
inline bool MeetingServerInfo::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeetingServerInfo::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeetingServerInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeetingServerInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 MeetingServerInfo::port() const {
  return port_;
}
inline void MeetingServerInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// required string server_ip = 2;
inline bool MeetingServerInfo::has_server_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeetingServerInfo::set_has_server_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeetingServerInfo::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeetingServerInfo::clear_server_ip() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    server_ip_->clear();
  }
  clear_has_server_ip();
}
inline const ::std::string& MeetingServerInfo::server_ip() const {
  return *server_ip_;
}
inline void MeetingServerInfo::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void MeetingServerInfo::set_server_ip(const char* value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void MeetingServerInfo::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MeetingServerInfo::mutable_server_ip() {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  return server_ip_;
}
inline ::std::string* MeetingServerInfo::release_server_ip() {
  clear_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_ip_;
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// JoinMeetingReturn

// required .JoinState join_state = 1;
inline bool JoinMeetingReturn::has_join_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinMeetingReturn::set_has_join_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinMeetingReturn::clear_has_join_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinMeetingReturn::clear_join_state() {
  join_state_ = 1;
  clear_has_join_state();
}
inline JoinState JoinMeetingReturn::join_state() const {
  return static_cast< JoinState >(join_state_);
}
inline void JoinMeetingReturn::set_join_state(JoinState value) {
  GOOGLE_DCHECK(JoinState_IsValid(value));
  set_has_join_state();
  join_state_ = value;
}

// optional .MeetingServerInfo server_info = 2;
inline bool JoinMeetingReturn::has_server_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinMeetingReturn::set_has_server_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinMeetingReturn::clear_has_server_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinMeetingReturn::clear_server_info() {
  if (server_info_ != NULL) server_info_->::MeetingServerInfo::Clear();
  clear_has_server_info();
}
inline const ::MeetingServerInfo& JoinMeetingReturn::server_info() const {
  return server_info_ != NULL ? *server_info_ : *default_instance_->server_info_;
}
inline ::MeetingServerInfo* JoinMeetingReturn::mutable_server_info() {
  set_has_server_info();
  if (server_info_ == NULL) server_info_ = new ::MeetingServerInfo;
  return server_info_;
}
inline ::MeetingServerInfo* JoinMeetingReturn::release_server_info() {
  clear_has_server_info();
  ::MeetingServerInfo* temp = server_info_;
  server_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// User

// required string user_name = 1;
inline bool User::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& User::user_name() const {
  return *user_name_;
}
inline void User::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void User::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void User::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* User::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 2;
inline bool User::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& User::password() const {
  return *password_;
}
inline void User::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void User::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void User::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* User::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .Identity identity = 3;
inline bool User::has_identity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_identity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_identity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_identity() {
  identity_ = 1;
  clear_has_identity();
}
inline Identity User::identity() const {
  return static_cast< Identity >(identity_);
}
inline void User::set_identity(Identity value) {
  GOOGLE_DCHECK(Identity_IsValid(value));
  set_has_identity();
  identity_ = value;
}

// -------------------------------------------------------------------

// HeartBeatSendPackage

// required string user_name = 1;
inline bool HeartBeatSendPackage::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeatSendPackage::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeatSendPackage::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeatSendPackage::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& HeartBeatSendPackage::user_name() const {
  return *user_name_;
}
inline void HeartBeatSendPackage::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void HeartBeatSendPackage::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void HeartBeatSendPackage::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeartBeatSendPackage::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* HeartBeatSendPackage::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string meeting_id = 2;
inline bool HeartBeatSendPackage::has_meeting_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartBeatSendPackage::set_has_meeting_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartBeatSendPackage::clear_has_meeting_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartBeatSendPackage::clear_meeting_id() {
  if (meeting_id_ != &::google::protobuf::internal::kEmptyString) {
    meeting_id_->clear();
  }
  clear_has_meeting_id();
}
inline const ::std::string& HeartBeatSendPackage::meeting_id() const {
  return *meeting_id_;
}
inline void HeartBeatSendPackage::set_meeting_id(const ::std::string& value) {
  set_has_meeting_id();
  if (meeting_id_ == &::google::protobuf::internal::kEmptyString) {
    meeting_id_ = new ::std::string;
  }
  meeting_id_->assign(value);
}
inline void HeartBeatSendPackage::set_meeting_id(const char* value) {
  set_has_meeting_id();
  if (meeting_id_ == &::google::protobuf::internal::kEmptyString) {
    meeting_id_ = new ::std::string;
  }
  meeting_id_->assign(value);
}
inline void HeartBeatSendPackage::set_meeting_id(const char* value, size_t size) {
  set_has_meeting_id();
  if (meeting_id_ == &::google::protobuf::internal::kEmptyString) {
    meeting_id_ = new ::std::string;
  }
  meeting_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeartBeatSendPackage::mutable_meeting_id() {
  set_has_meeting_id();
  if (meeting_id_ == &::google::protobuf::internal::kEmptyString) {
    meeting_id_ = new ::std::string;
  }
  return meeting_id_;
}
inline ::std::string* HeartBeatSendPackage::release_meeting_id() {
  clear_has_meeting_id();
  if (meeting_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = meeting_id_;
    meeting_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// HeartReturnPackage

// required .Identity identity = 1;
inline bool HeartReturnPackage::has_identity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartReturnPackage::set_has_identity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartReturnPackage::clear_has_identity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartReturnPackage::clear_identity() {
  identity_ = 1;
  clear_has_identity();
}
inline Identity HeartReturnPackage::identity() const {
  return static_cast< Identity >(identity_);
}
inline void HeartReturnPackage::set_identity(Identity value) {
  GOOGLE_DCHECK(Identity_IsValid(value));
  set_has_identity();
  identity_ = value;
}

// -------------------------------------------------------------------

// UserList

// repeated .User users = 1;
inline int UserList::users_size() const {
  return users_.size();
}
inline void UserList::clear_users() {
  users_.Clear();
}
inline const ::User& UserList::users(int index) const {
  return users_.Get(index);
}
inline ::User* UserList::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::User* UserList::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::User >&
UserList::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::User >*
UserList::mutable_users() {
  return &users_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Operation_OperationData_OperationDataType>() {
  return ::Operation_OperationData_OperationDataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Operations_OperationAvaliable>() {
  return ::Operations_OperationAvaliable_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< Identity>() {
  return Identity_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< JoinState>() {
  return JoinState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
