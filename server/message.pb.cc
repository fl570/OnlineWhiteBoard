// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Operation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Operation_OperationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operation_OperationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Operation_OperationData_Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operation_OperationData_Point_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Operation_OperationData_OperationDataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Operations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operations_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Operations_OperationAvaliable_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Document_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeetingServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeetingServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinMeetingReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinMeetingReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatSendPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatSendPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartReturnPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartReturnPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Identity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JoinState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Operation_descriptor_ = file->message_type(0);
  static const int Operation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, data_),
  };
  Operation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operation_descriptor_,
      Operation::default_instance_,
      Operation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operation));
  Operation_OperationData_descriptor_ = Operation_descriptor_->nested_type(0);
  static const int Operation_OperationData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, thinkness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, start_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, end_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, top_left_corner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, bottom_right_corner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, is_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, alpha_),
  };
  Operation_OperationData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operation_OperationData_descriptor_,
      Operation_OperationData::default_instance_,
      Operation_OperationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operation_OperationData));
  Operation_OperationData_Point_descriptor_ = Operation_OperationData_descriptor_->nested_type(0);
  static const int Operation_OperationData_Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData_Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData_Point, y_),
  };
  Operation_OperationData_Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operation_OperationData_Point_descriptor_,
      Operation_OperationData_Point::default_instance_,
      Operation_OperationData_Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData_Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_OperationData_Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operation_OperationData_Point));
  Operation_OperationData_OperationDataType_descriptor_ = Operation_OperationData_descriptor_->enum_type(0);
  Operations_descriptor_ = file->message_type(1);
  static const int Operations_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operations, operation_avaliable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operations, operations_),
  };
  Operations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operations_descriptor_,
      Operations::default_instance_,
      Operations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operations));
  Operations_OperationAvaliable_descriptor_ = Operations_descriptor_->enum_type(0);
  Document_descriptor_ = file->message_type(2);
  static const int Document_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, user_name_),
  };
  Document_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_descriptor_,
      Document::default_instance_,
      Document_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document));
  DocumentList_descriptor_ = file->message_type(3);
  static const int DocumentList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentList, history_document_),
  };
  DocumentList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentList_descriptor_,
      DocumentList::default_instance_,
      DocumentList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentList));
  MeetingServerInfo_descriptor_ = file->message_type(4);
  static const int MeetingServerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingServerInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingServerInfo, server_ip_),
  };
  MeetingServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeetingServerInfo_descriptor_,
      MeetingServerInfo::default_instance_,
      MeetingServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeetingServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeetingServerInfo));
  JoinMeetingReturn_descriptor_ = file->message_type(5);
  static const int JoinMeetingReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinMeetingReturn, join_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinMeetingReturn, server_info_),
  };
  JoinMeetingReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinMeetingReturn_descriptor_,
      JoinMeetingReturn::default_instance_,
      JoinMeetingReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinMeetingReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinMeetingReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinMeetingReturn));
  User_descriptor_ = file->message_type(6);
  static const int User_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, identity_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  HeartBeatSendPackage_descriptor_ = file->message_type(7);
  static const int HeartBeatSendPackage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatSendPackage, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatSendPackage, meeting_id_),
  };
  HeartBeatSendPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatSendPackage_descriptor_,
      HeartBeatSendPackage::default_instance_,
      HeartBeatSendPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatSendPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatSendPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatSendPackage));
  HeartReturnPackage_descriptor_ = file->message_type(8);
  static const int HeartReturnPackage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartReturnPackage, identity_),
  };
  HeartReturnPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartReturnPackage_descriptor_,
      HeartReturnPackage::default_instance_,
      HeartReturnPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartReturnPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartReturnPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartReturnPackage));
  UserList_descriptor_ = file->message_type(9);
  static const int UserList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, users_),
  };
  UserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserList_descriptor_,
      UserList::default_instance_,
      UserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserList));
  Identity_descriptor_ = file->enum_type(0);
  JoinState_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operation_descriptor_, &Operation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operation_OperationData_descriptor_, &Operation_OperationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operation_OperationData_Point_descriptor_, &Operation_OperationData_Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operations_descriptor_, &Operations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_descriptor_, &Document::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentList_descriptor_, &DocumentList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeetingServerInfo_descriptor_, &MeetingServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinMeetingReturn_descriptor_, &JoinMeetingReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatSendPackage_descriptor_, &HeartBeatSendPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartReturnPackage_descriptor_, &HeartReturnPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserList_descriptor_, &UserList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Operation::default_instance_;
  delete Operation_reflection_;
  delete Operation_OperationData::default_instance_;
  delete Operation_OperationData_reflection_;
  delete Operation_OperationData_Point::default_instance_;
  delete Operation_OperationData_Point_reflection_;
  delete Operations::default_instance_;
  delete Operations_reflection_;
  delete Document::default_instance_;
  delete Document_reflection_;
  delete DocumentList::default_instance_;
  delete DocumentList_reflection_;
  delete MeetingServerInfo::default_instance_;
  delete MeetingServerInfo_reflection_;
  delete JoinMeetingReturn::default_instance_;
  delete JoinMeetingReturn_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete HeartBeatSendPackage::default_instance_;
  delete HeartBeatSendPackage_reflection_;
  delete HeartReturnPackage::default_instance_;
  delete HeartReturnPackage_reflection_;
  delete UserList::default_instance_;
  delete UserList_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"\301\005\n\tOperation\022\025\n\rserial_"
    "number\030\001 \002(\r\022&\n\004data\030\002 \002(\0132\030.Operation.O"
    "perationData\032\364\004\n\rOperationData\022=\n\tdata_t"
    "ype\030\001 \002(\0162*.Operation.OperationData.Oper"
    "ationDataType\022\021\n\tthinkness\030\002 \002(\005\022\r\n\005colo"
    "r\030\003 \001(\005\0223\n\013start_point\030\004 \001(\0132\036.Operation"
    ".OperationData.Point\0221\n\tend_point\030\005 \001(\0132"
    "\036.Operation.OperationData.Point\022.\n\006cente"
    "r\030\006 \001(\0132\036.Operation.OperationData.Point\022"
    "\r\n\005angle\030\007 \001(\002\022\t\n\001a\030\010 \001(\002\022\t\n\001b\030\t \001(\002\0227\n\017"
    "top_left_corner\030\n \001(\0132\036.Operation.Operat"
    "ionData.Point\022;\n\023bottom_right_corner\030\013 \001"
    "(\0132\036.Operation.OperationData.Point\0220\n\010po"
    "sition\030\014 \001(\0132\036.Operation.OperationData.P"
    "oint\022\020\n\010is_start\030\017 \001(\010\022\014\n\004fill\030\r \001(\010\022\r\n\005"
    "alpha\030\016 \001(\002\032\035\n\005Point\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002"
    "(\005\"O\n\021OperationDataType\022\010\n\004LINE\020\000\022\013\n\007ELL"
    "IPSE\020\001\022\014\n\010RECTANGE\020\002\022\t\n\005POINT\020\003\022\n\n\006ERASE"
    "R\020\004\"\263\001\n\nOperations\022;\n\023operation_avaliabl"
    "e\030\001 \002(\0162\036.Operations.OperationAvaliable\022"
    "\036\n\noperations\030\002 \003(\0132\n.Operation\"H\n\022Opera"
    "tionAvaliable\022\021\n\rNOT_AVALIABLE\020\001\022\021\n\rLOAD"
    "_DOCUMENT\020\002\022\014\n\010AVALIBLE\020\003\"B\n\010Document\022\025\n"
    "\rserial_number\030\001 \002(\r\022\014\n\004data\030\002 \002(\014\022\021\n\tus"
    "er_name\030\003 \001(\t\"3\n\014DocumentList\022#\n\020history"
    "_document\030\001 \003(\0132\t.Document\"4\n\021MeetingSer"
    "verInfo\022\014\n\004port\030\001 \002(\005\022\021\n\tserver_ip\030\002 \002(\t"
    "\"\\\n\021JoinMeetingReturn\022\036\n\njoin_state\030\001 \002("
    "\0162\n.JoinState\022\'\n\013server_info\030\002 \001(\0132\022.Mee"
    "tingServerInfo\"H\n\004User\022\021\n\tuser_name\030\001 \002("
    "\t\022\020\n\010password\030\002 \001(\t\022\033\n\010identity\030\003 \001(\0162\t."
    "Identity\"=\n\024HeartBeatSendPackage\022\021\n\tuser"
    "_name\030\001 \002(\t\022\022\n\nmeeting_id\030\002 \002(\t\"1\n\022Heart"
    "ReturnPackage\022\033\n\010identity\030\001 \002(\0162\t.Identi"
    "ty\" \n\010UserList\022\024\n\005users\030\001 \003(\0132\005.User*5\n\010"
    "Identity\022\010\n\004HOST\020\001\022\r\n\tCANDIDATE\020\002\022\020\n\014PAR"
    "TICIPANTS\020\003*>\n\tJoinState\022\013\n\007SUCCESS\020\001\022\010\n"
    "\004FAIL\020\002\022\020\n\014NOTAVAILABLE\020\003\022\010\n\004DEAD\020\004", 1515);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Operation::default_instance_ = new Operation();
  Operation_OperationData::default_instance_ = new Operation_OperationData();
  Operation_OperationData_Point::default_instance_ = new Operation_OperationData_Point();
  Operations::default_instance_ = new Operations();
  Document::default_instance_ = new Document();
  DocumentList::default_instance_ = new DocumentList();
  MeetingServerInfo::default_instance_ = new MeetingServerInfo();
  JoinMeetingReturn::default_instance_ = new JoinMeetingReturn();
  User::default_instance_ = new User();
  HeartBeatSendPackage::default_instance_ = new HeartBeatSendPackage();
  HeartReturnPackage::default_instance_ = new HeartReturnPackage();
  UserList::default_instance_ = new UserList();
  Operation::default_instance_->InitAsDefaultInstance();
  Operation_OperationData::default_instance_->InitAsDefaultInstance();
  Operation_OperationData_Point::default_instance_->InitAsDefaultInstance();
  Operations::default_instance_->InitAsDefaultInstance();
  Document::default_instance_->InitAsDefaultInstance();
  DocumentList::default_instance_->InitAsDefaultInstance();
  MeetingServerInfo::default_instance_->InitAsDefaultInstance();
  JoinMeetingReturn::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  HeartBeatSendPackage::default_instance_->InitAsDefaultInstance();
  HeartReturnPackage::default_instance_->InitAsDefaultInstance();
  UserList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

const ::google::protobuf::EnumDescriptor* Identity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Identity_descriptor_;
}
bool Identity_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JoinState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinState_descriptor_;
}
bool JoinState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Operation_OperationData_OperationDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_OperationData_OperationDataType_descriptor_;
}
bool Operation_OperationData_OperationDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Operation_OperationData_OperationDataType Operation_OperationData::LINE;
const Operation_OperationData_OperationDataType Operation_OperationData::ELLIPSE;
const Operation_OperationData_OperationDataType Operation_OperationData::RECTANGE;
const Operation_OperationData_OperationDataType Operation_OperationData::POINT;
const Operation_OperationData_OperationDataType Operation_OperationData::ERASER;
const Operation_OperationData_OperationDataType Operation_OperationData::OperationDataType_MIN;
const Operation_OperationData_OperationDataType Operation_OperationData::OperationDataType_MAX;
const int Operation_OperationData::OperationDataType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Operation_OperationData_Point::kXFieldNumber;
const int Operation_OperationData_Point::kYFieldNumber;
#endif  // !_MSC_VER

Operation_OperationData_Point::Operation_OperationData_Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operation_OperationData_Point::InitAsDefaultInstance() {
}

Operation_OperationData_Point::Operation_OperationData_Point(const Operation_OperationData_Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operation_OperationData_Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operation_OperationData_Point::~Operation_OperationData_Point() {
  SharedDtor();
}

void Operation_OperationData_Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Operation_OperationData_Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation_OperationData_Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_OperationData_Point_descriptor_;
}

const Operation_OperationData_Point& Operation_OperationData_Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

Operation_OperationData_Point* Operation_OperationData_Point::default_instance_ = NULL;

Operation_OperationData_Point* Operation_OperationData_Point::New() const {
  return new Operation_OperationData_Point;
}

void Operation_OperationData_Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operation_OperationData_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operation_OperationData_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operation_OperationData_Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }
  
  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operation_OperationData_Point::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation_OperationData_Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operation_OperationData_Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operation_OperationData_Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operation_OperationData_Point::MergeFrom(const Operation_OperationData_Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operation_OperationData_Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation_OperationData_Point::CopyFrom(const Operation_OperationData_Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation_OperationData_Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Operation_OperationData_Point::Swap(Operation_OperationData_Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operation_OperationData_Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operation_OperationData_Point_descriptor_;
  metadata.reflection = Operation_OperationData_Point_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Operation_OperationData::kDataTypeFieldNumber;
const int Operation_OperationData::kThinknessFieldNumber;
const int Operation_OperationData::kColorFieldNumber;
const int Operation_OperationData::kStartPointFieldNumber;
const int Operation_OperationData::kEndPointFieldNumber;
const int Operation_OperationData::kCenterFieldNumber;
const int Operation_OperationData::kAngleFieldNumber;
const int Operation_OperationData::kAFieldNumber;
const int Operation_OperationData::kBFieldNumber;
const int Operation_OperationData::kTopLeftCornerFieldNumber;
const int Operation_OperationData::kBottomRightCornerFieldNumber;
const int Operation_OperationData::kPositionFieldNumber;
const int Operation_OperationData::kIsStartFieldNumber;
const int Operation_OperationData::kFillFieldNumber;
const int Operation_OperationData::kAlphaFieldNumber;
#endif  // !_MSC_VER

Operation_OperationData::Operation_OperationData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operation_OperationData::InitAsDefaultInstance() {
  start_point_ = const_cast< ::Operation_OperationData_Point*>(&::Operation_OperationData_Point::default_instance());
  end_point_ = const_cast< ::Operation_OperationData_Point*>(&::Operation_OperationData_Point::default_instance());
  center_ = const_cast< ::Operation_OperationData_Point*>(&::Operation_OperationData_Point::default_instance());
  top_left_corner_ = const_cast< ::Operation_OperationData_Point*>(&::Operation_OperationData_Point::default_instance());
  bottom_right_corner_ = const_cast< ::Operation_OperationData_Point*>(&::Operation_OperationData_Point::default_instance());
  position_ = const_cast< ::Operation_OperationData_Point*>(&::Operation_OperationData_Point::default_instance());
}

Operation_OperationData::Operation_OperationData(const Operation_OperationData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operation_OperationData::SharedCtor() {
  _cached_size_ = 0;
  data_type_ = 0;
  thinkness_ = 0;
  color_ = 0;
  start_point_ = NULL;
  end_point_ = NULL;
  center_ = NULL;
  angle_ = 0;
  a_ = 0;
  b_ = 0;
  top_left_corner_ = NULL;
  bottom_right_corner_ = NULL;
  position_ = NULL;
  is_start_ = false;
  fill_ = false;
  alpha_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operation_OperationData::~Operation_OperationData() {
  SharedDtor();
}

void Operation_OperationData::SharedDtor() {
  if (this != default_instance_) {
    delete start_point_;
    delete end_point_;
    delete center_;
    delete top_left_corner_;
    delete bottom_right_corner_;
    delete position_;
  }
}

void Operation_OperationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation_OperationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_OperationData_descriptor_;
}

const Operation_OperationData& Operation_OperationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

Operation_OperationData* Operation_OperationData::default_instance_ = NULL;

Operation_OperationData* Operation_OperationData::New() const {
  return new Operation_OperationData;
}

void Operation_OperationData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_type_ = 0;
    thinkness_ = 0;
    color_ = 0;
    if (has_start_point()) {
      if (start_point_ != NULL) start_point_->::Operation_OperationData_Point::Clear();
    }
    if (has_end_point()) {
      if (end_point_ != NULL) end_point_->::Operation_OperationData_Point::Clear();
    }
    if (has_center()) {
      if (center_ != NULL) center_->::Operation_OperationData_Point::Clear();
    }
    angle_ = 0;
    a_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    b_ = 0;
    if (has_top_left_corner()) {
      if (top_left_corner_ != NULL) top_left_corner_->::Operation_OperationData_Point::Clear();
    }
    if (has_bottom_right_corner()) {
      if (bottom_right_corner_ != NULL) bottom_right_corner_->::Operation_OperationData_Point::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Operation_OperationData_Point::Clear();
    }
    is_start_ = false;
    fill_ = false;
    alpha_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operation_OperationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Operation.OperationData.OperationDataType data_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Operation_OperationData_OperationDataType_IsValid(value)) {
            set_data_type(static_cast< ::Operation_OperationData_OperationDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thinkness;
        break;
      }
      
      // required int32 thinkness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thinkness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thinkness_)));
          set_has_thinkness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }
      
      // optional int32 color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start_point;
        break;
      }
      
      // optional .Operation.OperationData.Point start_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end_point;
        break;
      }
      
      // optional .Operation.OperationData.Point end_point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_center;
        break;
      }
      
      // optional .Operation.OperationData.Point center = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_angle;
        break;
      }
      
      // optional float angle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_a;
        break;
      }
      
      // optional float a = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_b;
        break;
      }
      
      // optional float b = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_top_left_corner;
        break;
      }
      
      // optional .Operation.OperationData.Point top_left_corner = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_top_left_corner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left_corner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_bottom_right_corner;
        break;
      }
      
      // optional .Operation.OperationData.Point bottom_right_corner = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bottom_right_corner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_right_corner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_position;
        break;
      }
      
      // optional .Operation.OperationData.Point position = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fill;
        break;
      }
      
      // optional bool fill = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
          set_has_fill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_alpha;
        break;
      }
      
      // optional float alpha = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_is_start;
        break;
      }
      
      // optional bool is_start = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_start_)));
          set_has_is_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operation_OperationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Operation.OperationData.OperationDataType data_type = 1;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->data_type(), output);
  }
  
  // required int32 thinkness = 2;
  if (has_thinkness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->thinkness(), output);
  }
  
  // optional int32 color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->color(), output);
  }
  
  // optional .Operation.OperationData.Point start_point = 4;
  if (has_start_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->start_point(), output);
  }
  
  // optional .Operation.OperationData.Point end_point = 5;
  if (has_end_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->end_point(), output);
  }
  
  // optional .Operation.OperationData.Point center = 6;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->center(), output);
  }
  
  // optional float angle = 7;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->angle(), output);
  }
  
  // optional float a = 8;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->a(), output);
  }
  
  // optional float b = 9;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->b(), output);
  }
  
  // optional .Operation.OperationData.Point top_left_corner = 10;
  if (has_top_left_corner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->top_left_corner(), output);
  }
  
  // optional .Operation.OperationData.Point bottom_right_corner = 11;
  if (has_bottom_right_corner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->bottom_right_corner(), output);
  }
  
  // optional .Operation.OperationData.Point position = 12;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->position(), output);
  }
  
  // optional bool fill = 13;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->fill(), output);
  }
  
  // optional float alpha = 14;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->alpha(), output);
  }
  
  // optional bool is_start = 15;
  if (has_is_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_start(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operation_OperationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Operation.OperationData.OperationDataType data_type = 1;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->data_type(), target);
  }
  
  // required int32 thinkness = 2;
  if (has_thinkness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->thinkness(), target);
  }
  
  // optional int32 color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->color(), target);
  }
  
  // optional .Operation.OperationData.Point start_point = 4;
  if (has_start_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->start_point(), target);
  }
  
  // optional .Operation.OperationData.Point end_point = 5;
  if (has_end_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->end_point(), target);
  }
  
  // optional .Operation.OperationData.Point center = 6;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->center(), target);
  }
  
  // optional float angle = 7;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->angle(), target);
  }
  
  // optional float a = 8;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->a(), target);
  }
  
  // optional float b = 9;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->b(), target);
  }
  
  // optional .Operation.OperationData.Point top_left_corner = 10;
  if (has_top_left_corner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->top_left_corner(), target);
  }
  
  // optional .Operation.OperationData.Point bottom_right_corner = 11;
  if (has_bottom_right_corner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->bottom_right_corner(), target);
  }
  
  // optional .Operation.OperationData.Point position = 12;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->position(), target);
  }
  
  // optional bool fill = 13;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->fill(), target);
  }
  
  // optional float alpha = 14;
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->alpha(), target);
  }
  
  // optional bool is_start = 15;
  if (has_is_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_start(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operation_OperationData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Operation.OperationData.OperationDataType data_type = 1;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }
    
    // required int32 thinkness = 2;
    if (has_thinkness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thinkness());
    }
    
    // optional int32 color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional .Operation.OperationData.Point start_point = 4;
    if (has_start_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_point());
    }
    
    // optional .Operation.OperationData.Point end_point = 5;
    if (has_end_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_point());
    }
    
    // optional .Operation.OperationData.Point center = 6;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }
    
    // optional float angle = 7;
    if (has_angle()) {
      total_size += 1 + 4;
    }
    
    // optional float a = 8;
    if (has_a()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float b = 9;
    if (has_b()) {
      total_size += 1 + 4;
    }
    
    // optional .Operation.OperationData.Point top_left_corner = 10;
    if (has_top_left_corner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_left_corner());
    }
    
    // optional .Operation.OperationData.Point bottom_right_corner = 11;
    if (has_bottom_right_corner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_right_corner());
    }
    
    // optional .Operation.OperationData.Point position = 12;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // optional bool is_start = 15;
    if (has_is_start()) {
      total_size += 1 + 1;
    }
    
    // optional bool fill = 13;
    if (has_fill()) {
      total_size += 1 + 1;
    }
    
    // optional float alpha = 14;
    if (has_alpha()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation_OperationData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operation_OperationData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operation_OperationData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operation_OperationData::MergeFrom(const Operation_OperationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_thinkness()) {
      set_thinkness(from.thinkness());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_start_point()) {
      mutable_start_point()->::Operation_OperationData_Point::MergeFrom(from.start_point());
    }
    if (from.has_end_point()) {
      mutable_end_point()->::Operation_OperationData_Point::MergeFrom(from.end_point());
    }
    if (from.has_center()) {
      mutable_center()->::Operation_OperationData_Point::MergeFrom(from.center());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_top_left_corner()) {
      mutable_top_left_corner()->::Operation_OperationData_Point::MergeFrom(from.top_left_corner());
    }
    if (from.has_bottom_right_corner()) {
      mutable_bottom_right_corner()->::Operation_OperationData_Point::MergeFrom(from.bottom_right_corner());
    }
    if (from.has_position()) {
      mutable_position()->::Operation_OperationData_Point::MergeFrom(from.position());
    }
    if (from.has_is_start()) {
      set_is_start(from.is_start());
    }
    if (from.has_fill()) {
      set_fill(from.fill());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operation_OperationData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation_OperationData::CopyFrom(const Operation_OperationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation_OperationData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_start_point()) {
    if (!this->start_point().IsInitialized()) return false;
  }
  if (has_end_point()) {
    if (!this->end_point().IsInitialized()) return false;
  }
  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  if (has_top_left_corner()) {
    if (!this->top_left_corner().IsInitialized()) return false;
  }
  if (has_bottom_right_corner()) {
    if (!this->bottom_right_corner().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void Operation_OperationData::Swap(Operation_OperationData* other) {
  if (other != this) {
    std::swap(data_type_, other->data_type_);
    std::swap(thinkness_, other->thinkness_);
    std::swap(color_, other->color_);
    std::swap(start_point_, other->start_point_);
    std::swap(end_point_, other->end_point_);
    std::swap(center_, other->center_);
    std::swap(angle_, other->angle_);
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(top_left_corner_, other->top_left_corner_);
    std::swap(bottom_right_corner_, other->bottom_right_corner_);
    std::swap(position_, other->position_);
    std::swap(is_start_, other->is_start_);
    std::swap(fill_, other->fill_);
    std::swap(alpha_, other->alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operation_OperationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operation_OperationData_descriptor_;
  metadata.reflection = Operation_OperationData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Operation::kSerialNumberFieldNumber;
const int Operation::kDataFieldNumber;
#endif  // !_MSC_VER

Operation::Operation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operation::InitAsDefaultInstance() {
  data_ = const_cast< ::Operation_OperationData*>(&::Operation_OperationData::default_instance());
}

Operation::Operation(const Operation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operation::SharedCtor() {
  _cached_size_ = 0;
  serial_number_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operation::~Operation() {
  SharedDtor();
}

void Operation::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_descriptor_;
}

const Operation& Operation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

Operation* Operation::default_instance_ = NULL;

Operation* Operation::New() const {
  return new Operation;
}

void Operation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_number_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::Operation_OperationData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required .Operation.OperationData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial_number(), output);
  }
  
  // required .Operation.OperationData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial_number(), target);
  }
  
  // required .Operation.OperationData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }
    
    // required .Operation.OperationData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_data()) {
      mutable_data()->::Operation_OperationData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void Operation::Swap(Operation* other) {
  if (other != this) {
    std::swap(serial_number_, other->serial_number_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operation_descriptor_;
  metadata.reflection = Operation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Operations_OperationAvaliable_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operations_OperationAvaliable_descriptor_;
}
bool Operations_OperationAvaliable_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Operations_OperationAvaliable Operations::NOT_AVALIABLE;
const Operations_OperationAvaliable Operations::LOAD_DOCUMENT;
const Operations_OperationAvaliable Operations::AVALIBLE;
const Operations_OperationAvaliable Operations::OperationAvaliable_MIN;
const Operations_OperationAvaliable Operations::OperationAvaliable_MAX;
const int Operations::OperationAvaliable_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Operations::kOperationAvaliableFieldNumber;
const int Operations::kOperationsFieldNumber;
#endif  // !_MSC_VER

Operations::Operations()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operations::InitAsDefaultInstance() {
}

Operations::Operations(const Operations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operations::SharedCtor() {
  _cached_size_ = 0;
  operation_avaliable_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operations::~Operations() {
  SharedDtor();
}

void Operations::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Operations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operations_descriptor_;
}

const Operations& Operations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

Operations* Operations::default_instance_ = NULL;

Operations* Operations::New() const {
  return new Operations;
}

void Operations::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operation_avaliable_ = 1;
  }
  operations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Operations.OperationAvaliable operation_avaliable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Operations_OperationAvaliable_IsValid(value)) {
            set_operation_avaliable(static_cast< ::Operations_OperationAvaliable >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_operations;
        break;
      }
      
      // repeated .Operation operations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_operations;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Operations.OperationAvaliable operation_avaliable = 1;
  if (has_operation_avaliable()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation_avaliable(), output);
  }
  
  // repeated .Operation operations = 2;
  for (int i = 0; i < this->operations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->operations(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Operations.OperationAvaliable operation_avaliable = 1;
  if (has_operation_avaliable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation_avaliable(), target);
  }
  
  // repeated .Operation operations = 2;
  for (int i = 0; i < this->operations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->operations(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operations::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Operations.OperationAvaliable operation_avaliable = 1;
    if (has_operation_avaliable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation_avaliable());
    }
    
  }
  // repeated .Operation operations = 2;
  total_size += 1 * this->operations_size();
  for (int i = 0; i < this->operations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operations(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operations::MergeFrom(const Operations& from) {
  GOOGLE_CHECK_NE(&from, this);
  operations_.MergeFrom(from.operations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation_avaliable()) {
      set_operation_avaliable(from.operation_avaliable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operations::CopyFrom(const Operations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operations::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < operations_size(); i++) {
    if (!this->operations(i).IsInitialized()) return false;
  }
  return true;
}

void Operations::Swap(Operations* other) {
  if (other != this) {
    std::swap(operation_avaliable_, other->operation_avaliable_);
    operations_.Swap(&other->operations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operations_descriptor_;
  metadata.reflection = Operations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Document::kSerialNumberFieldNumber;
const int Document::kDataFieldNumber;
const int Document::kUserNameFieldNumber;
#endif  // !_MSC_VER

Document::Document()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document::InitAsDefaultInstance() {
}

Document::Document(const Document& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  serial_number_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document::~Document() {
  SharedDtor();
}

void Document::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_descriptor_;
}

const Document& Document::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

Document* Document::default_instance_ = NULL;

Document* Document::New() const {
  return new Document;
}

void Document::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_number_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial_number(), output);
  }
  
  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial_number(), target);
  }
  
  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Document::Swap(Document* other) {
  if (other != this) {
    std::swap(serial_number_, other->serial_number_);
    std::swap(data_, other->data_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_descriptor_;
  metadata.reflection = Document_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentList::kHistoryDocumentFieldNumber;
#endif  // !_MSC_VER

DocumentList::DocumentList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DocumentList::InitAsDefaultInstance() {
}

DocumentList::DocumentList(const DocumentList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DocumentList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentList::~DocumentList() {
  SharedDtor();
}

void DocumentList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DocumentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentList_descriptor_;
}

const DocumentList& DocumentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

DocumentList* DocumentList::default_instance_ = NULL;

DocumentList* DocumentList::New() const {
  return new DocumentList;
}

void DocumentList::Clear() {
  history_document_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Document history_document = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_document:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_document()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_history_document;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DocumentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Document history_document = 1;
  for (int i = 0; i < this->history_document_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->history_document(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DocumentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Document history_document = 1;
  for (int i = 0; i < this->history_document_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->history_document(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DocumentList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Document history_document = 1;
  total_size += 1 * this->history_document_size();
  for (int i = 0; i < this->history_document_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_document(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentList::MergeFrom(const DocumentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_document_.MergeFrom(from.history_document_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentList::CopyFrom(const DocumentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentList::IsInitialized() const {
  
  for (int i = 0; i < history_document_size(); i++) {
    if (!this->history_document(i).IsInitialized()) return false;
  }
  return true;
}

void DocumentList::Swap(DocumentList* other) {
  if (other != this) {
    history_document_.Swap(&other->history_document_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentList_descriptor_;
  metadata.reflection = DocumentList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeetingServerInfo::kPortFieldNumber;
const int MeetingServerInfo::kServerIpFieldNumber;
#endif  // !_MSC_VER

MeetingServerInfo::MeetingServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MeetingServerInfo::InitAsDefaultInstance() {
}

MeetingServerInfo::MeetingServerInfo(const MeetingServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MeetingServerInfo::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0;
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeetingServerInfo::~MeetingServerInfo() {
  SharedDtor();
}

void MeetingServerInfo::SharedDtor() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete server_ip_;
  }
  if (this != default_instance_) {
  }
}

void MeetingServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeetingServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeetingServerInfo_descriptor_;
}

const MeetingServerInfo& MeetingServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

MeetingServerInfo* MeetingServerInfo::default_instance_ = NULL;

MeetingServerInfo* MeetingServerInfo::New() const {
  return new MeetingServerInfo;
}

void MeetingServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0;
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
        server_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeetingServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_ip;
        break;
      }
      
      // required string server_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MeetingServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }
  
  // required string server_ip = 2;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MeetingServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }
  
  // required string server_ip = 2;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MeetingServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // required string server_ip = 2;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeetingServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeetingServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeetingServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeetingServerInfo::MergeFrom(const MeetingServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeetingServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeetingServerInfo::CopyFrom(const MeetingServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeetingServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MeetingServerInfo::Swap(MeetingServerInfo* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeetingServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeetingServerInfo_descriptor_;
  metadata.reflection = MeetingServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinMeetingReturn::kJoinStateFieldNumber;
const int JoinMeetingReturn::kServerInfoFieldNumber;
#endif  // !_MSC_VER

JoinMeetingReturn::JoinMeetingReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinMeetingReturn::InitAsDefaultInstance() {
  server_info_ = const_cast< ::MeetingServerInfo*>(&::MeetingServerInfo::default_instance());
}

JoinMeetingReturn::JoinMeetingReturn(const JoinMeetingReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinMeetingReturn::SharedCtor() {
  _cached_size_ = 0;
  join_state_ = 1;
  server_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinMeetingReturn::~JoinMeetingReturn() {
  SharedDtor();
}

void JoinMeetingReturn::SharedDtor() {
  if (this != default_instance_) {
    delete server_info_;
  }
}

void JoinMeetingReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinMeetingReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinMeetingReturn_descriptor_;
}

const JoinMeetingReturn& JoinMeetingReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

JoinMeetingReturn* JoinMeetingReturn::default_instance_ = NULL;

JoinMeetingReturn* JoinMeetingReturn::New() const {
  return new JoinMeetingReturn;
}

void JoinMeetingReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    join_state_ = 1;
    if (has_server_info()) {
      if (server_info_ != NULL) server_info_->::MeetingServerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinMeetingReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .JoinState join_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (JoinState_IsValid(value)) {
            set_join_state(static_cast< JoinState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_info;
        break;
      }
      
      // optional .MeetingServerInfo server_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinMeetingReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .JoinState join_state = 1;
  if (has_join_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->join_state(), output);
  }
  
  // optional .MeetingServerInfo server_info = 2;
  if (has_server_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinMeetingReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .JoinState join_state = 1;
  if (has_join_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->join_state(), target);
  }
  
  // optional .MeetingServerInfo server_info = 2;
  if (has_server_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinMeetingReturn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .JoinState join_state = 1;
    if (has_join_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->join_state());
    }
    
    // optional .MeetingServerInfo server_info = 2;
    if (has_server_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinMeetingReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinMeetingReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinMeetingReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinMeetingReturn::MergeFrom(const JoinMeetingReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_join_state()) {
      set_join_state(from.join_state());
    }
    if (from.has_server_info()) {
      mutable_server_info()->::MeetingServerInfo::MergeFrom(from.server_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinMeetingReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinMeetingReturn::CopyFrom(const JoinMeetingReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinMeetingReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_server_info()) {
    if (!this->server_info().IsInitialized()) return false;
  }
  return true;
}

void JoinMeetingReturn::Swap(JoinMeetingReturn* other) {
  if (other != this) {
    std::swap(join_state_, other->join_state_);
    std::swap(server_info_, other->server_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinMeetingReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinMeetingReturn_descriptor_;
  metadata.reflection = JoinMeetingReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int User::kUserNameFieldNumber;
const int User::kPasswordFieldNumber;
const int User::kIdentityFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void User::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identity_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  SharedDtor();
}

void User::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    identity_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_identity;
        break;
      }
      
      // optional .Identity identity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Identity_IsValid(value)) {
            set_identity(static_cast< Identity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional .Identity identity = 3;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->identity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional .Identity identity = 3;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->identity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int User::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional .Identity identity = 3;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->identity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(password_, other->password_);
    std::swap(identity_, other->identity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeatSendPackage::kUserNameFieldNumber;
const int HeartBeatSendPackage::kMeetingIdFieldNumber;
#endif  // !_MSC_VER

HeartBeatSendPackage::HeartBeatSendPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeatSendPackage::InitAsDefaultInstance() {
}

HeartBeatSendPackage::HeartBeatSendPackage(const HeartBeatSendPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeatSendPackage::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  meeting_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatSendPackage::~HeartBeatSendPackage() {
  SharedDtor();
}

void HeartBeatSendPackage::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (meeting_id_ != &::google::protobuf::internal::kEmptyString) {
    delete meeting_id_;
  }
  if (this != default_instance_) {
  }
}

void HeartBeatSendPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatSendPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatSendPackage_descriptor_;
}

const HeartBeatSendPackage& HeartBeatSendPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

HeartBeatSendPackage* HeartBeatSendPackage::default_instance_ = NULL;

HeartBeatSendPackage* HeartBeatSendPackage::New() const {
  return new HeartBeatSendPackage;
}

void HeartBeatSendPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_meeting_id()) {
      if (meeting_id_ != &::google::protobuf::internal::kEmptyString) {
        meeting_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatSendPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_meeting_id;
        break;
      }
      
      // required string meeting_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meeting_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meeting_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meeting_id().data(), this->meeting_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartBeatSendPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }
  
  // required string meeting_id = 2;
  if (has_meeting_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meeting_id().data(), this->meeting_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->meeting_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeatSendPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }
  
  // required string meeting_id = 2;
  if (has_meeting_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meeting_id().data(), this->meeting_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->meeting_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeatSendPackage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // required string meeting_id = 2;
    if (has_meeting_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meeting_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatSendPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatSendPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatSendPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatSendPackage::MergeFrom(const HeartBeatSendPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_meeting_id()) {
      set_meeting_id(from.meeting_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatSendPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatSendPackage::CopyFrom(const HeartBeatSendPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatSendPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void HeartBeatSendPackage::Swap(HeartBeatSendPackage* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(meeting_id_, other->meeting_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatSendPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatSendPackage_descriptor_;
  metadata.reflection = HeartBeatSendPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartReturnPackage::kIdentityFieldNumber;
#endif  // !_MSC_VER

HeartReturnPackage::HeartReturnPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartReturnPackage::InitAsDefaultInstance() {
}

HeartReturnPackage::HeartReturnPackage(const HeartReturnPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartReturnPackage::SharedCtor() {
  _cached_size_ = 0;
  identity_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartReturnPackage::~HeartReturnPackage() {
  SharedDtor();
}

void HeartReturnPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartReturnPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartReturnPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartReturnPackage_descriptor_;
}

const HeartReturnPackage& HeartReturnPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

HeartReturnPackage* HeartReturnPackage::default_instance_ = NULL;

HeartReturnPackage* HeartReturnPackage::New() const {
  return new HeartReturnPackage;
}

void HeartReturnPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    identity_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartReturnPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Identity identity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Identity_IsValid(value)) {
            set_identity(static_cast< Identity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartReturnPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Identity identity = 1;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->identity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartReturnPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Identity identity = 1;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->identity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartReturnPackage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Identity identity = 1;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->identity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartReturnPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartReturnPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartReturnPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartReturnPackage::MergeFrom(const HeartReturnPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identity()) {
      set_identity(from.identity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartReturnPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartReturnPackage::CopyFrom(const HeartReturnPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartReturnPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HeartReturnPackage::Swap(HeartReturnPackage* other) {
  if (other != this) {
    std::swap(identity_, other->identity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartReturnPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartReturnPackage_descriptor_;
  metadata.reflection = HeartReturnPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserList::kUsersFieldNumber;
#endif  // !_MSC_VER

UserList::UserList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserList::InitAsDefaultInstance() {
}

UserList::UserList(const UserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserList::~UserList() {
  SharedDtor();
}

void UserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserList_descriptor_;
}

const UserList& UserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

UserList* UserList::default_instance_ = NULL;

UserList* UserList::New() const {
  return new UserList;
}

void UserList::Clear() {
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .User users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .User users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .User users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserList::ByteSize() const {
  int total_size = 0;
  
  // repeated .User users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserList::MergeFrom(const UserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserList::CopyFrom(const UserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {
  
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void UserList::Swap(UserList* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserList_descriptor_;
  metadata.reflection = UserList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
